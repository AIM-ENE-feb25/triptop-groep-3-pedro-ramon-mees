@startuml TripTop Payment Feature Class Diagram

title "TripTop Payment Feature - Class Diagram"

skinparam linetype ortho

' Controller
class PaymentController {
  - paymentService: IPaymentService
  + PaymentController(paymentService: IPaymentService)
  + createInvoice(invoiceRequest: InvoiceRequest): InvoiceResponse
}

' Service Interface
interface IPaymentService {
  + processInvoice(request: InvoiceRequest): InvoiceResponse
}

' Service Implementation
class PaymentServiceImpl implements IPaymentService {
  - paymentAdapter: IPaymentAdapter
  + PaymentServiceImpl(paymentAdapterFactory: PaymentAdapterFactory)
  + processInvoice(request: InvoiceRequest): InvoiceResponse
}

' Payment Adapter Interface
interface IPaymentAdapter {
  + processInvoicePayment(request: InvoiceRequest): InvoiceResponse
  + isAvailable(): boolean
}

' Adapter Factory with Circuit Breaker
class PaymentAdapterFactory {
  - stripePaymentAdapter: StripePaymentAdapter
  - paypalPaymentAdapter: PaypalPaymentAdapter
  - failureCount: int
  - lastFailureTime: long
  - {static} MAX_FAILURES: int = 3
  - {static} RESET_TIMEOUT_MS: long = 30000
  + PaymentAdapterFactory(stripePaymentAdapter, paypalPaymentAdapter)
  + getPaymentAdapter(): IPaymentAdapter
  - isCircuitClosed(): boolean
  - recordFailure(): void
  - resetCircuit(): void
}

' Stripe Adapter
class StripePaymentAdapter implements IPaymentAdapter {
  - apiKey: String
  + processInvoicePayment(request: InvoiceRequest): InvoiceResponse
  + isAvailable(): boolean
}

' PayPal Adapter
class PaypalPaymentAdapter implements IPaymentAdapter {
  - httpClient: HttpClient
  - CLIENT_ID: String
  - SECRET: String
  - encodedCredentials: String
  + PaypalPaymentAdapter()
  + processInvoicePayment(invoiceRequest: InvoiceRequest): InvoiceResponse
  + isAvailable(): boolean
  - getAccessToken(): String
}

' DTO Classes
class InvoiceRequest <<record>> {
  - userId: String
  - amount: Long
  - currency: String
  + InvoiceRequest(userId: String, amount: Long, currency: String)
  + userId(): String
  + amount(): Long
  + currency(): String
}

class InvoiceResponse <<record>> {
  - invoiceId: String
  - currency: String
  - amount: String
  - provider: String
  + InvoiceResponse(invoiceId: String, currency: String, amount: String, provider: String)
  + toString(): String
}


' Relationships
PaymentController o--> IPaymentService

PaymentServiceImpl o--> IPaymentAdapter

PaymentAdapterFactory o--> StripePaymentAdapter
PaymentAdapterFactory o--> PaypalPaymentAdapter
PaymentServiceImpl --> PaymentAdapterFactory : uses

PaymentController ..> InvoiceRequest : uses
PaymentController ..> InvoiceResponse : returns

IPaymentService ..> InvoiceRequest : processes
IPaymentService ..> InvoiceResponse : returns
IPaymentAdapter ..> InvoiceRequest : processes
IPaymentAdapter ..> InvoiceResponse : returns

@enduml