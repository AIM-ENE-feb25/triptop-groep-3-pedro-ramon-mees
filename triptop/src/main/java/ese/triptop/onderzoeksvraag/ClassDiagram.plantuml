@startuml
title Triptop API Architecture - Class Diagram

package "ese.triptop.onderzoeksvraag" {
    package "api" {
        interface ApiAdapter<T, R> {
            + R execute(T request)
            + String getServiceName()
            + boolean isAvailable()
        }
        
        interface ApiGateway {
            + <T, R> R executeApiCall(Class<? extends ApiAdapter<T, R>> adapterType, T request)
            + <T, R> ApiAdapter<T, R> getAdapter(Class<? extends ApiAdapter<T, R>> adapterType)
        }
        
        class DefaultApiGateway implements ApiGateway {
            - Map<Class<?>, ApiAdapter<?, ?>> adapters
            - ConfigurationManager configManager
            + DefaultApiGateway(ConfigurationManager configManager)
            + <T, R> R executeApiCall(Class<? extends ApiAdapter<T, R>> adapterType, T request)
            + <T, R> ApiAdapter<T, R> getAdapter(Class<? extends ApiAdapter<T, R>> adapterType)
            + void registerAdapter(Class<?> adapterType, ApiAdapter<?, ?> adapter)
        }
        
        class ApiException extends Exception {
            - String errorCode
            - int statusCode
            + ApiException(String message, String errorCode, int statusCode, Throwable cause)
            + String getErrorCode()
            + int getStatusCode()
        }
        
        interface ConfigurationManager {
            + String getConfigValue(String key)
            + String getConfigValue(String key, String defaultValue)
            + void reloadConfiguration()
        }
        
        class PropertyConfigurationManager implements ConfigurationManager {
            - Properties properties
            - String configPath
            + PropertyConfigurationManager(String configPath)
            + String getConfigValue(String key)
            + String getConfigValue(String key, String defaultValue)
            + void reloadConfiguration()
        }
    }
    
    package "adapters" {
        interface BookingAdapter extends ApiAdapter {
            + String getBookingProvider()
        }
        
        interface TripAdvisorAdapter extends ApiAdapter {
            + String getRecommendationProvider()
        }
        
        interface FlightAdapter extends ApiAdapter {
            + String getFlightProvider()
        }
        
        class BookingComAdapter implements BookingAdapter {
            - HttpClient httpClient
            - ConfigurationManager configManager
            - ObjectMapper objectMapper
            + BookingComAdapter(ConfigurationManager configManager)
            + HotelSearchResponse execute(HotelSearchRequest request)
            + String getServiceName()
            + boolean isAvailable()
            + String getBookingProvider()
            - HotelSearchResponse mapResponse(String apiResponse)
        }
        
        class TripAdvisorApiAdapter implements TripAdvisorAdapter {
            - HttpClient httpClient
            - ConfigurationManager configManager
            - ObjectMapper objectMapper
            + TripAdvisorApiAdapter(ConfigurationManager configManager)
            + RestaurantSearchResponse execute(RestaurantSearchRequest request)
            + String getServiceName()
            + boolean isAvailable()
            + String getRecommendationProvider()
            - RestaurantSearchResponse mapResponse(String apiResponse)
        }
        
        class FlightApiAdapter implements FlightAdapter {
            - HttpClient httpClient
            - ConfigurationManager configManager
            - ObjectMapper objectMapper
            + FlightApiAdapter(ConfigurationManager configManager)
            + FlightSearchResponse execute(FlightSearchRequest request)
            + String getServiceName()
            + boolean isAvailable()
            + String getFlightProvider()
            - FlightSearchResponse mapResponse(String apiResponse)
        }
    }
    
    package "service" {
        interface TravelService {
            + List<HotelBookingOption> getHotelBookingOptions(HotelSearchCriteria searchCriteria)
            + List<RestaurantRecommendation> getRestaurantRecommendations(Location location)
            + List<FlightOffer> getFlightOffers(FlightSearchCriteria searchCriteria)
        }
        
        class TravelServiceImpl implements TravelService {
            - ApiGateway apiGateway
            + TravelServiceImpl(ApiGateway apiGateway)
            + List<HotelBookingOption> getHotelBookingOptions(HotelSearchCriteria searchCriteria)
            + List<RestaurantRecommendation> getRestaurantRecommendations(Location location)
            + List<FlightOffer> getFlightOffers(FlightSearchCriteria searchCriteria)
            - HotelSearchRequest createHotelSearchRequest(HotelSearchCriteria criteria)
            - RestaurantSearchRequest createRestaurantSearchRequest(Location location)
            - FlightSearchRequest createFlightSearchRequest(FlightSearchCriteria criteria)
        }
        
        class ServiceException extends Exception {
            - String errorCode
            + ServiceException(String message, String errorCode, Throwable cause)
            + String getErrorCode()
        }
    }
    
    package "controller" {
        class TravelController {
            - TravelService travelService
            + TravelController(TravelService travelService)
            + ResponseEntity<List<HotelBookingOptionDto>> getHotelOptions(HotelSearchCriteriaDto criteriaDto)
            + ResponseEntity<List<RestaurantRecommendationDto>> getRestaurantRecommendations(LocationDto locationDto)
            + ResponseEntity<List<FlightOfferDto>> getFlightOffers(FlightSearchCriteriaDto criteriaDto)
        }
    }
    
    package "dto" {
        class HotelSearchRequest {
            - double latitude
            - double longitude
            - String arrivalDate
            - String departureDate
            - int adults
            - int rooms
            - String currency
            - String locale
            + getters/setters
        }
        
        class HotelSearchResponse {
            - List<HotelDto> hotels
            - int totalCount
            - String currency
            + getters/setters
        }
        
        class RestaurantSearchRequest {
            - String locationId
            - int limit
            - String language
            + getters/setters
        }
        
        class RestaurantSearchResponse {
            - List<RestaurantDto> restaurants
            - int totalCount
            + getters/setters
        }
        
        class FlightSearchRequest {
            - String originLocationCode
            - String destinationLocationCode
            - String departureDate
            - int adults
            + getters/setters
        }
        
        class FlightSearchResponse {
            - List<FlightOfferDto> flightOffers
            - String currency
            + getters/setters
        }
    }
    
    package "domain" {
        class HotelBookingOption {
            - String hotelId
            - String name
            - String description
            - Location location
            - double price
            - String currency
            - double rating
            - List<String> amenities
            - String imageUrl
            + getters/setters
        }
        
        class RestaurantRecommendation {
            - String restaurantId
            - String name
            - String description
            - Location location
            - String cuisine
            - double rating
            - String priceLevel
            - String imageUrl
            + getters/setters
        }
        
        class FlightOffer {
            - String offerId
            - String airline
            - String departureAirport
            - String arrivalAirport
            - LocalDateTime departureTime
            - LocalDateTime arrivalTime
            - double price
            - String currency
            - int stops
            - String duration
            + getters/setters
        }
        
        class Location {
            - double latitude
            - double longitude
            - String city
            - String country
            + getters/setters
        }
        
        class HotelSearchCriteria {
            - Location location
            - LocalDate checkInDate
            - LocalDate checkOutDate
            - int adults
            - int rooms
            + getters/setters
        }
        
        class FlightSearchCriteria {
            - String origin
            - String destination
            - LocalDate departureDate
            - int passengers
            + getters/setters
        }
    }
}

' Relationships
ApiGateway --> ApiAdapter : uses
DefaultApiGateway --> ConfigurationManager : uses
TravelService --> ApiGateway : uses
TravelController --> TravelService : uses

BookingComAdapter --> ConfigurationManager : uses
TripAdvisorApiAdapter --> ConfigurationManager : uses
FlightApiAdapter --> ConfigurationManager : uses

TravelServiceImpl ..> HotelSearchRequest : creates
TravelServiceImpl ..> RestaurantSearchRequest : creates
TravelServiceImpl ..> FlightSearchRequest : creates

TravelServiceImpl ..> BookingAdapter : uses via ApiGateway
TravelServiceImpl ..> TripAdvisorAdapter : uses via ApiGateway
TravelServiceImpl ..> FlightAdapter : uses via ApiGateway

BookingComAdapter ..> HotelSearchResponse : returns
TripAdvisorApiAdapter ..> RestaurantSearchResponse : returns
FlightApiAdapter ..> FlightSearchResponse : returns

TravelServiceImpl ..> HotelBookingOption : returns
TravelServiceImpl ..> RestaurantRecommendation : returns
TravelServiceImpl ..> FlightOffer : returns

@enduml
